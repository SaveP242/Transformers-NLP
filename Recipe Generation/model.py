# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eUdfbuy-_9OeqPXc5AU6CGL4nzrcpd9J
"""

!pip install transformers[torch]

import torch
import numpy
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from transformers import TextDataset, DataCollatorForLanguageModeling
from transformers import Trainer, TrainingArguments

# Load the pre-trained GPT-2 model and tokenizer
model_name = "gpt2"
model = GPT2LMHeadModel.from_pretrained(model_name)
tokenizer = GPT2Tokenizer.from_pretrained(model_name)

# Load and preprocess your recipe dataset
dataset_file = "dataset.txt"
with open(dataset_file, "r") as file:
    recipes = file.read().split("\n")

# Tokenize and format the data
input_ids = tokenizer.encode(" ".join(recipes), return_tensors='pt', max_length=1024, truncation=True)

# Create a dataset and data collator
dataset = TextDataset(
    tokenizer=tokenizer,
    file_path=dataset_file,
    block_size=128,
)

data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer,
    mlm=False,
)

# Define training arguments
training_args = TrainingArguments(
    output_dir="./recipe_finetuned_model",
    overwrite_output_dir=True,
    num_train_epochs=3,
    per_device_train_batch_size=4,
    evaluation_strategy="steps",
    eval_steps=10_000,
    logging_steps=1_000,
    logging_dir="./logs",
    learning_rate=1e-4,
    warmup_steps=500,
    weight_decay=0.01,
    load_best_model_at_end=False,  # Disabling load_best_model_at_end
    push_to_hub=False,
)
# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=dataset,

)

# Fine-tune the model
trainer.train()

# Save the fine-tuned model and tokenizer
model.save_pretrained("./recipe_finetuned_model")
tokenizer.save_pretrained("./recipe_finetuned_model")

# Generate recipes using the fine-tuned model
input_text = "Generate a recipe for a cake"
input_ids = tokenizer.encode(input_text, return_tensors='pt')

output = model.generate(input_ids, max_length=200, num_return_sequences=1)

# Decode and print the generated recipe
generated_recipe = tokenizer.decode(output[0], skip_special_tokens=True)
print(generated_recipe)